/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Link } from "./Link";
import { LinkCountArgs } from "./LinkCountArgs";
import { LinkFindManyArgs } from "./LinkFindManyArgs";
import { LinkFindUniqueArgs } from "./LinkFindUniqueArgs";
import { CreateLinkArgs } from "./CreateLinkArgs";
import { UpdateLinkArgs } from "./UpdateLinkArgs";
import { DeleteLinkArgs } from "./DeleteLinkArgs";
import { ParsedContentFindManyArgs } from "../../parsedContent/base/ParsedContentFindManyArgs";
import { ParsedContent } from "../../parsedContent/base/ParsedContent";
import { Project } from "../../project/base/Project";
import { LinkService } from "../link.service";
@graphql.Resolver(() => Link)
export class LinkResolverBase {
  constructor(protected readonly service: LinkService) {}

  async _linksMeta(
    @graphql.Args() args: LinkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Link])
  async links(@graphql.Args() args: LinkFindManyArgs): Promise<Link[]> {
    return this.service.links(args);
  }

  @graphql.Query(() => Link, { nullable: true })
  async link(@graphql.Args() args: LinkFindUniqueArgs): Promise<Link | null> {
    const result = await this.service.link(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Link)
  async createLink(@graphql.Args() args: CreateLinkArgs): Promise<Link> {
    return await this.service.createLink({
      ...args,
      data: {
        ...args.data,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Link)
  async updateLink(@graphql.Args() args: UpdateLinkArgs): Promise<Link | null> {
    try {
      return await this.service.updateLink({
        ...args,
        data: {
          ...args.data,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Link)
  async deleteLink(@graphql.Args() args: DeleteLinkArgs): Promise<Link | null> {
    try {
      return await this.service.deleteLink(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [ParsedContent], { name: "parsedContents" })
  async findParsedContents(
    @graphql.Parent() parent: Link,
    @graphql.Args() args: ParsedContentFindManyArgs
  ): Promise<ParsedContent[]> {
    const results = await this.service.findParsedContents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Project, {
    nullable: true,
    name: "project",
  })
  async getProject(@graphql.Parent() parent: Link): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
