/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LinkService } from "../link.service";
import { LinkCreateInput } from "./LinkCreateInput";
import { Link } from "./Link";
import { LinkFindManyArgs } from "./LinkFindManyArgs";
import { LinkWhereUniqueInput } from "./LinkWhereUniqueInput";
import { LinkUpdateInput } from "./LinkUpdateInput";
import { ParsedContentFindManyArgs } from "../../parsedContent/base/ParsedContentFindManyArgs";
import { ParsedContent } from "../../parsedContent/base/ParsedContent";
import { ParsedContentWhereUniqueInput } from "../../parsedContent/base/ParsedContentWhereUniqueInput";

export class LinkControllerBase {
  constructor(protected readonly service: LinkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Link })
  async createLink(@common.Body() data: LinkCreateInput): Promise<Link> {
    return await this.service.createLink({
      data: {
        ...data,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Link] })
  @ApiNestedQuery(LinkFindManyArgs)
  async links(@common.Req() request: Request): Promise<Link[]> {
    const args = plainToClass(LinkFindManyArgs, request.query);
    return this.service.links({
      ...args,
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Link })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async link(
    @common.Param() params: LinkWhereUniqueInput
  ): Promise<Link | null> {
    const result = await this.service.link({
      where: params,
      select: {
        createdAt: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Link })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLink(
    @common.Param() params: LinkWhereUniqueInput,
    @common.Body() data: LinkUpdateInput
  ): Promise<Link | null> {
    try {
      return await this.service.updateLink({
        where: params,
        data: {
          ...data,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Link })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLink(
    @common.Param() params: LinkWhereUniqueInput
  ): Promise<Link | null> {
    try {
      return await this.service.deleteLink({
        where: params,
        select: {
          createdAt: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/parsedContents")
  @ApiNestedQuery(ParsedContentFindManyArgs)
  async findParsedContents(
    @common.Req() request: Request,
    @common.Param() params: LinkWhereUniqueInput
  ): Promise<ParsedContent[]> {
    const query = plainToClass(ParsedContentFindManyArgs, request.query);
    const results = await this.service.findParsedContents(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        link: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/parsedContents")
  async connectParsedContents(
    @common.Param() params: LinkWhereUniqueInput,
    @common.Body() body: ParsedContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parsedContents: {
        connect: body,
      },
    };
    await this.service.updateLink({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/parsedContents")
  async updateParsedContents(
    @common.Param() params: LinkWhereUniqueInput,
    @common.Body() body: ParsedContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parsedContents: {
        set: body,
      },
    };
    await this.service.updateLink({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/parsedContents")
  async disconnectParsedContents(
    @common.Param() params: LinkWhereUniqueInput,
    @common.Body() body: ParsedContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parsedContents: {
        disconnect: body,
      },
    };
    await this.service.updateLink({
      where: params,
      data,
      select: { id: true },
    });
  }
}
