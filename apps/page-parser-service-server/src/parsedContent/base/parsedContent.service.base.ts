/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ParsedContent as PrismaParsedContent,
  Link as PrismaLink,
} from "@prisma/client";

export class ParsedContentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ParsedContentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.parsedContent.count(args);
  }

  async parsedContents<T extends Prisma.ParsedContentFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParsedContentFindManyArgs>
  ): Promise<PrismaParsedContent[]> {
    return this.prisma.parsedContent.findMany<Prisma.ParsedContentFindManyArgs>(
      args
    );
  }
  async parsedContent<T extends Prisma.ParsedContentFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParsedContentFindUniqueArgs>
  ): Promise<PrismaParsedContent | null> {
    return this.prisma.parsedContent.findUnique(args);
  }
  async createParsedContent<T extends Prisma.ParsedContentCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParsedContentCreateArgs>
  ): Promise<PrismaParsedContent> {
    return this.prisma.parsedContent.create<T>(args);
  }
  async updateParsedContent<T extends Prisma.ParsedContentUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParsedContentUpdateArgs>
  ): Promise<PrismaParsedContent> {
    return this.prisma.parsedContent.update<T>(args);
  }
  async deleteParsedContent<T extends Prisma.ParsedContentDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ParsedContentDeleteArgs>
  ): Promise<PrismaParsedContent> {
    return this.prisma.parsedContent.delete(args);
  }

  async getLink(parentId: string): Promise<PrismaLink | null> {
    return this.prisma.parsedContent
      .findUnique({
        where: { id: parentId },
      })
      .link();
  }
}
