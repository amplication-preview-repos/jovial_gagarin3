/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ParsedContentService } from "../parsedContent.service";
import { ParsedContentCreateInput } from "./ParsedContentCreateInput";
import { ParsedContent } from "./ParsedContent";
import { ParsedContentFindManyArgs } from "./ParsedContentFindManyArgs";
import { ParsedContentWhereUniqueInput } from "./ParsedContentWhereUniqueInput";
import { ParsedContentUpdateInput } from "./ParsedContentUpdateInput";

export class ParsedContentControllerBase {
  constructor(protected readonly service: ParsedContentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ParsedContent })
  async createParsedContent(
    @common.Body() data: ParsedContentCreateInput
  ): Promise<ParsedContent> {
    return await this.service.createParsedContent({
      data: {
        ...data,

        link: data.link
          ? {
              connect: data.link,
            }
          : undefined,
      },
      select: {
        content: true,
        createdAt: true,
        id: true,

        link: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ParsedContent] })
  @ApiNestedQuery(ParsedContentFindManyArgs)
  async parsedContents(
    @common.Req() request: Request
  ): Promise<ParsedContent[]> {
    const args = plainToClass(ParsedContentFindManyArgs, request.query);
    return this.service.parsedContents({
      ...args,
      select: {
        content: true,
        createdAt: true,
        id: true,

        link: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ParsedContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async parsedContent(
    @common.Param() params: ParsedContentWhereUniqueInput
  ): Promise<ParsedContent | null> {
    const result = await this.service.parsedContent({
      where: params,
      select: {
        content: true,
        createdAt: true,
        id: true,

        link: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ParsedContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateParsedContent(
    @common.Param() params: ParsedContentWhereUniqueInput,
    @common.Body() data: ParsedContentUpdateInput
  ): Promise<ParsedContent | null> {
    try {
      return await this.service.updateParsedContent({
        where: params,
        data: {
          ...data,

          link: data.link
            ? {
                connect: data.link,
              }
            : undefined,
        },
        select: {
          content: true,
          createdAt: true,
          id: true,

          link: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ParsedContent })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteParsedContent(
    @common.Param() params: ParsedContentWhereUniqueInput
  ): Promise<ParsedContent | null> {
    try {
      return await this.service.deleteParsedContent({
        where: params,
        select: {
          content: true,
          createdAt: true,
          id: true,

          link: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
